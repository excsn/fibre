# examples/fibre_logging.rolling.yaml
version: 1

appenders:
  # A. Standard console appender for immediate visibility.
  console:
    kind: console
    encoder:
      kind: pattern
      pattern: "[%d] %p - %m%n"

  # B. Simple Time-Based Rolling Appender
  # This appender will roll over every minute.
  simple_time_log:
    kind: rolling_file
    directory: "logs/rolling/simple"
    file_name_prefix: "app_time"
    file_name_suffix: ".log" # Suffix is used for base name, not rolled names here
    policy:
      time_granularity: minutely
    encoder:
      kind: pattern
      pattern: "[%d] [%p] [%t] %m%n"

  # C. Advanced Rolling Appender (using CustomRoller)
  # This appender will roll when it hits 1KB in size OR after a day.
  advanced_size_log:
    kind: rolling_file
    directory: "logs/rolling/advanced"
    file_name_prefix: "app_size"
    file_name_suffix: ".log"
    policy:
      time_granularity: daily       # Time boundary is still relevant
      max_file_size: "10KB"          # Rolls when file exceeds 1 kilobyte
      max_retained_sequences: 10     # Keeps the 5 most recent log files
      compression:
        compressed_file_suffix: ".gz"
        max_uncompressed_sequences: 10 # Keep the 2 most recent files uncompressed
    encoder:
      kind: pattern
      pattern: "ADVANCED | %m%n"

loggers:
  # Root logger sends INFO events to the console and the simple time-based roller.
  root:
    level: info
    appenders: [console, simple_time_log]

  # A dedicated logger to generate high-volume traffic for the advanced roller.
  # We use a specific target "high_volume" to route these messages.
  "high_volume":
    level: trace # Capture all messages sent to this target
    appenders: [advanced_size_log] # Send only to the advanced appender
    additive: false # Do not also send these messages to the root appenders